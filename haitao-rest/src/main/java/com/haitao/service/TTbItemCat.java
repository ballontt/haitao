/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.haitao.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-03-08")
public class TTbItemCat implements org.apache.thrift.TBase<TTbItemCat, TTbItemCat._Fields>, java.io.Serializable, Cloneable, Comparable<TTbItemCat> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTbItemCat");

  private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SORT_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("sortOrder", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField IS_PARENT_FIELD_DESC = new org.apache.thrift.protocol.TField("isParent", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CREATED_FIELD_DESC = new org.apache.thrift.protocol.TField("created", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField UPDATED_FIELD_DESC = new org.apache.thrift.protocol.TField("updated", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TTbItemCatStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TTbItemCatTupleSchemeFactory();

  public long parentId; // required
  public java.lang.String name; // required
  public int status; // required
  public int sortOrder; // required
  public int isParent; // required
  public java.lang.String created; // required
  public java.lang.String updated; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PARENT_ID((short)1, "parentId"),
    NAME((short)2, "name"),
    STATUS((short)3, "status"),
    SORT_ORDER((short)4, "sortOrder"),
    IS_PARENT((short)5, "isParent"),
    CREATED((short)6, "created"),
    UPDATED((short)7, "updated");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARENT_ID
          return PARENT_ID;
        case 2: // NAME
          return NAME;
        case 3: // STATUS
          return STATUS;
        case 4: // SORT_ORDER
          return SORT_ORDER;
        case 5: // IS_PARENT
          return IS_PARENT;
        case 6: // CREATED
          return CREATED;
        case 7: // UPDATED
          return UPDATED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PARENTID_ISSET_ID = 0;
  private static final int __STATUS_ISSET_ID = 1;
  private static final int __SORTORDER_ISSET_ID = 2;
  private static final int __ISPARENT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SORT_ORDER, new org.apache.thrift.meta_data.FieldMetaData("sortOrder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_PARENT, new org.apache.thrift.meta_data.FieldMetaData("isParent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATED, new org.apache.thrift.meta_data.FieldMetaData("created", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    tmpMap.put(_Fields.UPDATED, new org.apache.thrift.meta_data.FieldMetaData("updated", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTbItemCat.class, metaDataMap);
  }

  public TTbItemCat() {
  }

  public TTbItemCat(
    long parentId,
    java.lang.String name,
    int status,
    int sortOrder,
    int isParent,
    java.lang.String created,
    java.lang.String updated)
  {
    this();
    this.parentId = parentId;
    setParentIdIsSet(true);
    this.name = name;
    this.status = status;
    setStatusIsSet(true);
    this.sortOrder = sortOrder;
    setSortOrderIsSet(true);
    this.isParent = isParent;
    setIsParentIsSet(true);
    this.created = created;
    this.updated = updated;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTbItemCat(TTbItemCat other) {
    __isset_bitfield = other.__isset_bitfield;
    this.parentId = other.parentId;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.status = other.status;
    this.sortOrder = other.sortOrder;
    this.isParent = other.isParent;
    if (other.isSetCreated()) {
      this.created = other.created;
    }
    if (other.isSetUpdated()) {
      this.updated = other.updated;
    }
  }

  public TTbItemCat deepCopy() {
    return new TTbItemCat(this);
  }

  @Override
  public void clear() {
    setParentIdIsSet(false);
    this.parentId = 0;
    this.name = null;
    setStatusIsSet(false);
    this.status = 0;
    setSortOrderIsSet(false);
    this.sortOrder = 0;
    setIsParentIsSet(false);
    this.isParent = 0;
    this.created = null;
    this.updated = null;
  }

  public long getParentId() {
    return this.parentId;
  }

  public TTbItemCat setParentId(long parentId) {
    this.parentId = parentId;
    setParentIdIsSet(true);
    return this;
  }

  public void unsetParentId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARENTID_ISSET_ID);
  }

  /** Returns true if field parentId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARENTID_ISSET_ID);
  }

  public void setParentIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARENTID_ISSET_ID, value);
  }

  public java.lang.String getName() {
    return this.name;
  }

  public TTbItemCat setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public TTbItemCat setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getSortOrder() {
    return this.sortOrder;
  }

  public TTbItemCat setSortOrder(int sortOrder) {
    this.sortOrder = sortOrder;
    setSortOrderIsSet(true);
    return this;
  }

  public void unsetSortOrder() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SORTORDER_ISSET_ID);
  }

  /** Returns true if field sortOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetSortOrder() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SORTORDER_ISSET_ID);
  }

  public void setSortOrderIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SORTORDER_ISSET_ID, value);
  }

  public int getIsParent() {
    return this.isParent;
  }

  public TTbItemCat setIsParent(int isParent) {
    this.isParent = isParent;
    setIsParentIsSet(true);
    return this;
  }

  public void unsetIsParent() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISPARENT_ISSET_ID);
  }

  /** Returns true if field isParent is set (has been assigned a value) and false otherwise */
  public boolean isSetIsParent() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISPARENT_ISSET_ID);
  }

  public void setIsParentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISPARENT_ISSET_ID, value);
  }

  public java.lang.String getCreated() {
    return this.created;
  }

  public TTbItemCat setCreated(java.lang.String created) {
    this.created = created;
    return this;
  }

  public void unsetCreated() {
    this.created = null;
  }

  /** Returns true if field created is set (has been assigned a value) and false otherwise */
  public boolean isSetCreated() {
    return this.created != null;
  }

  public void setCreatedIsSet(boolean value) {
    if (!value) {
      this.created = null;
    }
  }

  public java.lang.String getUpdated() {
    return this.updated;
  }

  public TTbItemCat setUpdated(java.lang.String updated) {
    this.updated = updated;
    return this;
  }

  public void unsetUpdated() {
    this.updated = null;
  }

  /** Returns true if field updated is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdated() {
    return this.updated != null;
  }

  public void setUpdatedIsSet(boolean value) {
    if (!value) {
      this.updated = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case PARENT_ID:
      if (value == null) {
        unsetParentId();
      } else {
        setParentId((java.lang.Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((java.lang.Integer)value);
      }
      break;

    case SORT_ORDER:
      if (value == null) {
        unsetSortOrder();
      } else {
        setSortOrder((java.lang.Integer)value);
      }
      break;

    case IS_PARENT:
      if (value == null) {
        unsetIsParent();
      } else {
        setIsParent((java.lang.Integer)value);
      }
      break;

    case CREATED:
      if (value == null) {
        unsetCreated();
      } else {
        setCreated((java.lang.String)value);
      }
      break;

    case UPDATED:
      if (value == null) {
        unsetUpdated();
      } else {
        setUpdated((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PARENT_ID:
      return getParentId();

    case NAME:
      return getName();

    case STATUS:
      return getStatus();

    case SORT_ORDER:
      return getSortOrder();

    case IS_PARENT:
      return getIsParent();

    case CREATED:
      return getCreated();

    case UPDATED:
      return getUpdated();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PARENT_ID:
      return isSetParentId();
    case NAME:
      return isSetName();
    case STATUS:
      return isSetStatus();
    case SORT_ORDER:
      return isSetSortOrder();
    case IS_PARENT:
      return isSetIsParent();
    case CREATED:
      return isSetCreated();
    case UPDATED:
      return isSetUpdated();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TTbItemCat)
      return this.equals((TTbItemCat)that);
    return false;
  }

  public boolean equals(TTbItemCat that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_parentId = true;
    boolean that_present_parentId = true;
    if (this_present_parentId || that_present_parentId) {
      if (!(this_present_parentId && that_present_parentId))
        return false;
      if (this.parentId != that.parentId)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_sortOrder = true;
    boolean that_present_sortOrder = true;
    if (this_present_sortOrder || that_present_sortOrder) {
      if (!(this_present_sortOrder && that_present_sortOrder))
        return false;
      if (this.sortOrder != that.sortOrder)
        return false;
    }

    boolean this_present_isParent = true;
    boolean that_present_isParent = true;
    if (this_present_isParent || that_present_isParent) {
      if (!(this_present_isParent && that_present_isParent))
        return false;
      if (this.isParent != that.isParent)
        return false;
    }

    boolean this_present_created = true && this.isSetCreated();
    boolean that_present_created = true && that.isSetCreated();
    if (this_present_created || that_present_created) {
      if (!(this_present_created && that_present_created))
        return false;
      if (!this.created.equals(that.created))
        return false;
    }

    boolean this_present_updated = true && this.isSetUpdated();
    boolean that_present_updated = true && that.isSetUpdated();
    if (this_present_updated || that_present_updated) {
      if (!(this_present_updated && that_present_updated))
        return false;
      if (!this.updated.equals(that.updated))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(parentId);

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + status;

    hashCode = hashCode * 8191 + sortOrder;

    hashCode = hashCode * 8191 + isParent;

    hashCode = hashCode * 8191 + ((isSetCreated()) ? 131071 : 524287);
    if (isSetCreated())
      hashCode = hashCode * 8191 + created.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdated()) ? 131071 : 524287);
    if (isSetUpdated())
      hashCode = hashCode * 8191 + updated.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TTbItemCat other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetParentId()).compareTo(other.isSetParentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentId, other.parentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSortOrder()).compareTo(other.isSetSortOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortOrder, other.sortOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsParent()).compareTo(other.isSetIsParent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsParent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isParent, other.isParent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreated()).compareTo(other.isSetCreated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.created, other.created);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUpdated()).compareTo(other.isSetUpdated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updated, other.updated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TTbItemCat(");
    boolean first = true;

    sb.append("parentId:");
    sb.append(this.parentId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sortOrder:");
    sb.append(this.sortOrder);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isParent:");
    sb.append(this.isParent);
    first = false;
    if (!first) sb.append(", ");
    sb.append("created:");
    if (this.created == null) {
      sb.append("null");
    } else {
      sb.append(this.created);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updated:");
    if (this.updated == null) {
      sb.append("null");
    } else {
      sb.append(this.updated);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTbItemCatStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TTbItemCatStandardScheme getScheme() {
      return new TTbItemCatStandardScheme();
    }
  }

  private static class TTbItemCatStandardScheme extends org.apache.thrift.scheme.StandardScheme<TTbItemCat> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TTbItemCat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.parentId = iprot.readI64();
              struct.setParentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SORT_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sortOrder = iprot.readI32();
              struct.setSortOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_PARENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isParent = iprot.readI32();
              struct.setIsParentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREATED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.created = iprot.readString();
              struct.setCreatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // UPDATED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updated = iprot.readString();
              struct.setUpdatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TTbItemCat struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
      oprot.writeI64(struct.parentId);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SORT_ORDER_FIELD_DESC);
      oprot.writeI32(struct.sortOrder);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_PARENT_FIELD_DESC);
      oprot.writeI32(struct.isParent);
      oprot.writeFieldEnd();
      if (struct.created != null) {
        oprot.writeFieldBegin(CREATED_FIELD_DESC);
        oprot.writeString(struct.created);
        oprot.writeFieldEnd();
      }
      if (struct.updated != null) {
        oprot.writeFieldBegin(UPDATED_FIELD_DESC);
        oprot.writeString(struct.updated);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTbItemCatTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TTbItemCatTupleScheme getScheme() {
      return new TTbItemCatTupleScheme();
    }
  }

  private static class TTbItemCatTupleScheme extends org.apache.thrift.scheme.TupleScheme<TTbItemCat> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTbItemCat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetParentId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetStatus()) {
        optionals.set(2);
      }
      if (struct.isSetSortOrder()) {
        optionals.set(3);
      }
      if (struct.isSetIsParent()) {
        optionals.set(4);
      }
      if (struct.isSetCreated()) {
        optionals.set(5);
      }
      if (struct.isSetUpdated()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetParentId()) {
        oprot.writeI64(struct.parentId);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetSortOrder()) {
        oprot.writeI32(struct.sortOrder);
      }
      if (struct.isSetIsParent()) {
        oprot.writeI32(struct.isParent);
      }
      if (struct.isSetCreated()) {
        oprot.writeString(struct.created);
      }
      if (struct.isSetUpdated()) {
        oprot.writeString(struct.updated);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTbItemCat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.parentId = iprot.readI64();
        struct.setParentIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sortOrder = iprot.readI32();
        struct.setSortOrderIsSet(true);
      }
      if (incoming.get(4)) {
        struct.isParent = iprot.readI32();
        struct.setIsParentIsSet(true);
      }
      if (incoming.get(5)) {
        struct.created = iprot.readString();
        struct.setCreatedIsSet(true);
      }
      if (incoming.get(6)) {
        struct.updated = iprot.readString();
        struct.setUpdatedIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

